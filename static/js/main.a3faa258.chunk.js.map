{"version":3,"sources":["Start.tsx","ScanQrCode.tsx","Result.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Start","props","isSupported","window","BarcodeDetector","notSupportedText","react_default","a","createElement","className","Typography","variant","component","react_router_dom","to","Button","type","color","ScanQrCode","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","videoElement","canvasContext","canvasElementRef","barcodeDetector","mediaStream","stopped","React","createRef","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","createCanvasContext","initVideo","run","t0","alert","stop","apply","arguments","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","getTracks","Symbol","iterator","done","err","return","pause","current","Error","canvas","getContext","_initVideo","_callee2","constraints","_this2","_context2","video","facingMode","navigator","mediaDevices","getUserMedia","sent","document","srcObject","autoplay","onloadedmetadata","canvasElementHeight","offsetHeight","aspectRation","offsetWidth","canvasWidth","videoHeight","canvasHeight","width","height","_run","_callee3","_this3","_context3","requestAnimationFrame","renderVideo","detectBarcode","_renderVideo","_callee4","_this4","_context4","abrupt","clearRect","drawImage","videoWidth","_detectBarcode","_callee5","detectedBarcodes","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","detectedBarcode","_context5","Promise","resolve","setTimeout","paused","detect","console","log","setQrData","rawValue","history","push","pathname","finish","t1","error","ref","Component","Result","qrData","isUrl","test","buttonOpenUrl","onClick","open","gutterBottom","App","state","result","setState","react_router","exact","path","render","ScanQrCode_ScanQrCode","assign","data","Result_Result","Boolean","location","hostname","match","ReactDOM","App_App","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3faa258.chunk.js","sourcesContent":["import React from 'react';\nimport './Start.css';\nimport {Link} from \"react-router-dom\";\nimport {Button} from '@material-ui/core'\nimport {Typography} from '@material-ui/core'\n\nexport const Start: React.FunctionComponent = (props) => {\n  const isSupported = !!(window as any).BarcodeDetector;\n\n  const notSupportedText = <p className=\"error\">\n    Your browser does not support Shape Detection API. If you are using chrome on android enable\n    Experimental Web Platform features.\n  </p>;\n\n  return (\n    <div className=\"Start\">\n      <Typography variant=\"h3\" component=\"h2\">\n        Shape Detection API test\n      </Typography>\n\n      {!isSupported && notSupportedText}\n\n      <Link to=\"/qr-code\">\n        <Button variant=\"contained\" type=\"button\" color=\"primary\">\n          Scan QR-Code\n        </Button>\n      </Link>\n    </div>\n  )\n};\n","import React from 'react';\nimport './ScanQrCode.css';\nimport {RouteComponentProps} from \"react-router\";\n\nexport interface ScanQrCodeProps extends RouteComponentProps {\n  setQrData: (result: string) => void;\n}\n\nexport class ScanQrCode extends React.Component<ScanQrCodeProps> {\n  videoElement?: HTMLVideoElement;\n  canvasContext?: CanvasRenderingContext2D;\n  canvasElementRef: React.RefObject<HTMLCanvasElement>;\n  barcodeDetector?: any;\n  mediaStream?: MediaStream;\n  stopped = false;\n\n  constructor(props: any) {\n    super(props);\n\n    this.canvasElementRef = React.createRef<HTMLCanvasElement>();\n    this.barcodeDetector = new ((window as any).BarcodeDetector as any)();\n  }\n\n  async componentDidMount(): Promise<void> {\n    try {\n      this.createCanvasContext();\n      await this.initVideo();\n      await this.run();\n    }\n    catch (e) {\n      alert(e);\n      this.stopped = true;\n    }\n  }\n\n  componentWillUnmount(): void {\n    if (this.mediaStream) {\n      for (const track of this.mediaStream.getTracks()) {\n        track.stop();\n      }\n    }\n\n    if (this.videoElement) {\n      this.videoElement.pause();\n    }\n\n    this.stopped = true;\n  }\n\n  createCanvasContext() {\n    if (this.canvasElementRef.current == null) {\n      throw new Error(\"Canvas not set\")\n    }\n\n    const canvas = this.canvasElementRef.current.getContext('2d');\n    if (!canvas) {\n      throw new Error(\"Failed to create canvas context\")\n    }\n\n    this.canvasContext = canvas;\n  }\n\n  async initVideo() {\n    const constraints = {video: {facingMode: 'environment'}};\n    this.mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n\n    this.videoElement = document.createElement('video');\n    this.videoElement.srcObject = this.mediaStream;\n    this.videoElement.autoplay = true;\n    this.videoElement.onloadedmetadata = () => {\n      if (!this.canvasElementRef.current || !this.videoElement) {\n        return;\n      }\n\n      const canvasElementHeight = this.canvasElementRef.current.offsetHeight;\n      const canvasElementWidth = this.canvasElementRef.current.offsetWidth;\n\n      const aspectRation = canvasElementWidth / canvasElementHeight;\n\n      const canvasWidth = this.videoElement.videoHeight * aspectRation;\n      const canvasHeight = this.videoElement.videoHeight;\n\n      this.canvasElementRef.current.width = canvasWidth;\n      this.canvasElementRef.current.height = canvasHeight;\n    };\n  }\n\n  async run() {\n    requestAnimationFrame(() => this.renderVideo());\n\n    while (!this.stopped) {\n      await this.detectBarcode();\n    }\n  }\n\n  async renderVideo() {\n    if (!this.canvasElementRef.current || !this.videoElement || !this.canvasContext) {\n      return;\n    }\n\n    const canvas = this.canvasElementRef.current;\n\n    this.canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n\n    this.canvasContext.drawImage(this.videoElement,\n      (this.videoElement.videoWidth - canvas.width) / 2,\n      0,\n      canvas.width,\n      canvas.height,\n      0,\n      0,\n      canvas.width,\n      canvas.height);\n\n    if (!this.stopped) {\n      requestAnimationFrame(() => this.renderVideo())\n    }\n  }\n\n  async detectBarcode(): Promise<any> {\n    await new Promise(resolve => setTimeout(resolve, 300));\n\n    if (this.videoElement == null || this.videoElement.paused) {\n      return;\n    }\n\n    try {\n      const detectedBarcodes = await this.barcodeDetector.detect(this.videoElement);\n\n      for (const detectedBarcode of detectedBarcodes) {\n        console.log('Detected barcode', detectedBarcode);\n\n        this.props.setQrData(detectedBarcode.rawValue);\n        this.props.history.push({ pathname: '/result' });\n      }\n    } catch (e) {\n      console.error('Error in detect barcode', e);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"ScanQrCode\">\n        <div className=\"overlay\">\n          <div className=\"inner\">\n          </div>\n        </div>\n\n        <div className=\"info\">\n          <span>\n            Position the QR code in the center of the screen\n          </span>\n        </div>\n\n        <canvas ref={this.canvasElementRef}/>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport './Result.css';\nimport {Link, RouteComponentProps} from \"react-router-dom\";\nimport {Button, Typography} from '@material-ui/core'\n\nexport interface ResultProps extends RouteComponentProps {\n  qrData: string;\n}\n\nexport const Result: React.FunctionComponent<ResultProps> = (props) => {\n  if (!props.qrData) {\n    props.history.push({\n      pathname: '/',\n    });\n  }\n\n  function openUrl() {\n    window.open(props.qrData, '_blank', 'noopener')\n  }\n\n  const isUrl = /^https?:\\/\\//.test(props.qrData);\n  const buttonOpenUrl = <Button onClick={openUrl}>Open URL</Button>;\n\n  return (\n    <div className=\"Result\">\n      <Typography color=\"textSecondary\" gutterBottom>\n        QR code data\n      </Typography>\n      <Typography variant=\"h5\" component=\"h2\">\n        {props.qrData}\n      </Typography>\n\n      <Link to=\"/qr-code\" className=\"scan-again-link\">\n        <Button variant=\"contained\" color=\"primary\">Scan again</Button>\n      </Link>\n\n      {isUrl && buttonOpenUrl}\n    </div>\n  )\n};\n\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport {Start} from \"./Start\";\nimport {ScanQrCode} from \"./ScanQrCode\";\nimport {Result} from \"./Result\";\n\nimport './App.css'\n\nexport default class App extends React.Component {\n  constructor(props: any) {\n    super(props);\n  }\n\n  state = {\n    qrData: ''\n  };\n\n  setQrData(result: string): void {\n    this.setState({\n      qrData: result\n    });\n  };\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App-container\">\n          <Route exact path=\"/\" component={Start}/>\n\n          <Route path=\"/qr-code\"\n                 render={props => <ScanQrCode {...props} setQrData={((data: any) => this.setQrData(data))}/>}/>\n\n          <Route path=\"/result\" render={props => <Result {...props} qrData={this.state.qrData}/>}/>\n        </div>\n      </Router>\n    )\n  }\n\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}